#!/usr/bin/env bash

# This script manages container operations for OpenWRT builds
# SPDX-License-Identifier: GPL-3.0-or-later
# SPDX-FileCopyrightText: 2024 Wesley Gimenes <wehagy@proton.me>
# See LICENSE for the full license text.

set -eux

# Define container image details
CONTAINER_PREFIX="ghcr.io/openwrt"
BRANCH="main"
TARGETS=(
    "x86"
    "ath79"
    "mediatek"
    "ramips"
    "mediatek"
)
SUBTARGETS=(
    "64"
    "generic"
    "filogic"
    "mt7621"
    "filogic"
)
PROFILES_IMAGE=(
    "generic"
    "tplink_archer-c7-v4"
    "xiaomi_mi-router-ax3000t-ubootmod"
    "totolink_x5000r"
    "bananapi_bpi-r3"
)
# Packages to install or to remove for the build
PACKAGES_IMAGE=(
    # ======================================================================
    # luci web interface
    # ======================================================================
    luci
    # support to ssl
    luci-ssl

    # material theme
    #luci-theme-material

    # easy upgrade from web interface or command line
    #luci-app-attendedsysupgrade

    # periodic reboot or ping to host and if fails reboot, restart interface
    luci-app-watchcat

    # ======================================================================
    # netbird and kernel module dependency,
    # install or remove the two together
    # ======================================================================
    #netbird
    #kmod-wireguard
    #$(grep --invert-match '^$\|#' install-packages)
    $([[ -d custom-feed ]] && ls custom-feed || echo "")
)

# Check and set the container manager (Podman or Docker)
if command -v podman; then
    CONTAINER_MANAGER="podman"
elif command -v docker; then
    CONTAINER_MANAGER="docker"
else
    echo "ERROR: no container manager found, please install docker or podman"
    exit 1
fi

# Build process for a specific target, subtarget, and profile
build () {
    local TARGET=$1
    local SUBTARGET=$2
    local PROFILE_IMAGE=$3

    CONTAINER_TAG="${TARGET}-${SUBTARGET}-${BRANCH}"
    CONTAINER_SDK_IMAGE="${CONTAINER_PREFIX}/sdk:${CONTAINER_TAG}"
    CONTAINER_IMAGEBUILDER_IMAGE="${CONTAINER_PREFIX}/imagebuilder:${CONTAINER_TAG}"

    # Common container arguments
    CONTAINER_COMMON_ARGS=(
        run
        --rm
        --user 0:0
        --pull always
        --volume "${PWD}/bin/:/builder/bin/"
        $([[ -d custom-feed ]] && echo "--volume "${PWD}"/custom-feed/:/builder/custom-feed/:ro" || echo "")
    )

    # Container arguments for SDK
    CONTAINER_SDK_ARGS=(
        "${CONTAINER_COMMON_ARGS[@]}"
        "${CONTAINER_SDK_IMAGE}"
        # Update feeds and build packages
        bash -c "
            sed -i '2i src-link custom /builder/custom-feed' feeds.conf.default
            ./scripts/feeds update packages custom
            make defconfig

            # Logic to build additional packages
            for PACKAGE in custom-feed/*; do
                ./scripts/feeds install \"\${PACKAGE##*/}\"
                make package/\"\${PACKAGE##*/}\"/{clean,compile} -j$(nproc)
            done

            # Clean kernel modules
            rm -rf bin/targets/
            "
    )

    # Container arguments for Image Builder
    CONTAINER_IMAGEBUILDER_ARGS=(
        "${CONTAINER_COMMON_ARGS[@]}"
        "${CONTAINER_IMAGEBUILDER_IMAGE}"
        # Create symbolic links for IPK files and build the final image
        bash -c "
        shopt -s globstar nullglob
        for IPK in bin/**/*.ipk; do
            ln -sr \"\${IPK}\" packages/
        done
        shopt -u globstar nullglob
        make image PROFILE=\"${PROFILE_IMAGE}\" PACKAGES=\"${PACKAGES_IMAGE[*]}\" || {
            make image PROFILE=\"${PROFILE_IMAGE}\" PACKAGES=\"${PACKAGES_IMAGE[*]}\";
        };
        "
    )

    # Prepare the output directory
    [[ ! -d bin ]] && install --mode=0755 --directory bin

    [[ -d custom-feed ]] && "${CONTAINER_MANAGER}" "${CONTAINER_SDK_ARGS[@]}"
    "${CONTAINER_MANAGER}" "${CONTAINER_IMAGEBUILDER_ARGS[@]}"
    mv bin openwrt."${PROFILE_IMAGE}".$(TZ='America/Sao_Paulo' date +"%Y-%m-%d_%H-%M-%S")
}

# Iterate over targets, subtargets, and profiles
for ((i=0; i<"${#TARGETS[@]}"; i++)); do
    build "${TARGETS[i]}" "${SUBTARGETS[i]}" "${PROFILES_IMAGE[i]}"
done

exit 0
